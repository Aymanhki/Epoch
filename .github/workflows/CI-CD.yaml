name: Deploy to Google Cloud VM

on:
  push:
    branches:
      - main

jobs:
  test-new-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install SSH Client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: SSH into Google Cloud VM for testing
        run: |
          set -e 
          sshpass -p ${{ secrets.TESTER_SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.TESTER_SSH_USERNAME }} << EOF
            echo "Current directory path: $(pwd)"
            cd 
            rm -rf Epoch
            git clone https://github.com/Aymanhki/Epoch.git 
            cd
            cp credentials/db_params.json Epoch/epoch_backend/assets/
            cp credentials/virtual-bonito-412515-d7dae3104a12.json Epoch/epoch_backend/assets/
            cp credentials/fullchain.pem Epoch/epoch_backend/assets/
            cp credentials/privkey.pem Epoch/epoch_backend/assets/
            cp credentials/db_params.json Epoch/epoch_frontend/assets/
            cp credentials/virtual-bonito-412515-d7dae3104a12.json Epoch/epoch_frontend/assets/
            cp credentials/fullchain.pem Epoch/epoch_frontend/assets/
            cp credentials/privkey.pem Epoch/epoch_frontend/assets/
            cd Epoch/epoch_frontend/
            npm install
            cd ..
            pkill selenium
            pkill chromedriver
            pkill geckodriver
            pkill firefox
            export CI=true
            if ! pytest --cov=epoch_backend -rA --color=yes --disable-warnings --disable-pytest-warnings --show-capture=no ./epoch_backend/tests/integration_tests.py ./epoch_backend/tests/webserver_tests.py ./epoch_backend/tests/following_unit_tests.py; then
              echo "Webserver Backend Test(s) failed. Exiting with status 1."
              exit 1
            fi
            sudo fuser -k -n tcp 443
            sudo fuser -k -n tcp 8080
            sudo fuser -k -n tcp 80
            sudo fuser -k -n tcp 8000
            lsof -t -i:8080 | xargs kill -9
            lsof -t -i:80 | xargs kill -9
            lsof -t -i:443 | xargs kill -9
            lsof -t -i:8000 | xargs kill -9
            cd epoch_frontend/
            if ! npm test; then
              echo "Frontend server Test(s) failed. Exiting with status 1."
              exit 1
            fi
            exit 0
          EOF

  clean-old-build:
    needs: test-new-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install SSH Client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: SSH into Google Cloud VM for cleanup
        run: |
          sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }} << EOF
            echo "Current directory path: $(pwd)"
            cd 
            rm -rf Epoch
            sudo fuser -k -n tcp 443
            sudo fuser -k -n tcp 8080
            sudo fuser -k -n tcp 80
            sudo fuser -k -n tcp 8000
            docker stop \$(docker ps -q)
            docker rm \$(docker ps -aq)
            docker rmi \$(docker images -q)
            git clone https://github.com/Aymanhki/Epoch.git 
            cd
            cp credentials/db_params.json Epoch/epoch_backend/assets/
            cp credentials/virtual-bonito-412515-d7dae3104a12.json Epoch/epoch_backend/assets/
            cp credentials/fullchain.pem Epoch/epoch_backend/assets/
            cp credentials/privkey.pem Epoch/epoch_backend/assets/
            cp credentials/db_params.json Epoch/epoch_frontend/assets/
            cp credentials/virtual-bonito-412515-d7dae3104a12.json Epoch/epoch_frontend/assets/
            cp credentials/fullchain.pem Epoch/epoch_frontend/assets/
            cp credentials/privkey.pem Epoch/epoch_frontend/assets/
            cd
            cp credentials/get_version.sh Epoch/epoch_backend/
            cp credentials/get_version.sh Epoch/epoch_frontend/
            cd Epoch/epoch_frontend/
            chmod +x get_version.sh
            cd
            cd Epoch/epoch_backend/
            chmod +x get_version.sh
            exit
          EOF

  deploy-new-build:
    needs: clean-old-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install SSH Client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Get Docker Version for Backend
        id: get_version_backend
        run: |
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/aymanhki/epoch_frontend/tags/?page_size=1" | jq -r '.results[0].name')
          if [ -z "$latest_tag" ]; then
            version="v2.0.9" 
          elif [ "$latest_tag" == "latest" ]; then
            version="v2.0.9" 
          else
            major=$(echo "$latest_tag" | awk -F '.' '{print $2}')
            minor=$(echo "$latest_tag" | awk -F '.' '{print $3}')
            patch=$(echo "$latest_tag" | awk -F '.' '{print $4}')
            
            if [ $patch -lt 9 ]; then
              new_patch=$((patch + 1))
              version="v1.0.$new_patch"
            elif [ $minor -lt 9 ]; then
              new_minor=$((minor + 1))
              version="v1.$new_minor.0"
            else
              new_major=$((major + 1))
              version="v$new_major.0.0"
            fi
          fi
          echo "::set-output name=version::$version"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Get Docker Version for Frontend
        id: get_version_frontend
        run: |
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/aymanhki/epoch_frontend/tags/?page_size=1" | jq -r '.results[0].name')
          if [ -z "$latest_tag" ]; then
            version="v2.0.9" 
          elif [ "$latest_tag" == "latest" ]; then
            version="v2.0.9" 
          else
            major=$(echo "$latest_tag" | awk -F '.' '{print $2}')
            minor=$(echo "$latest_tag" | awk -F '.' '{print $3}')
            patch=$(echo "$latest_tag" | awk -F '.' '{print $4}')
            
            if [ $patch -lt 9 ]; then
              new_patch=$((patch + 1))
              version="v1.0.$new_patch"
            elif [ $minor -lt 9 ]; then
              new_minor=$((minor + 1))
              version="v1.$new_minor.0"
            else
              new_major=$((major + 1))
              version="v$new_major.0.0"
            fi
          fi
          echo "::set-output name=version::$version"
        env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}


      - name: Deploying Backend (Build and Run Backend Docker Container)
        run: |
          sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }} << EOF
            echo "Current directory path: $(pwd)"
            cd
            cd Epoch/epoch_backend/
            echo "Version for backend Docker image: $VERSION"
            docker build -t epoch_backend:$VERSION ./
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag epoch_backend:$VERSION $DOCKER_USERNAME/epoch_backend:$VERSION
            docker push $DOCKER_USERNAME/epoch_backend:$VERSION
            docker run -d -p 8080:8080 epoch_backend:$VERSION
            exit
          EOF
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ steps.get_version_backend.outputs.version }}
        if: success()

      - name: Deploying Frontend (Build and Run Frontend Docker Container)
        run: |
          sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }} << EOF
            echo "Current directory path: $(pwd)"
            cd
            cd Epoch/epoch_frontend/
            echo "Version for backend Docker image: $VERSION"
            docker build -t epoch_frontend:$VERSION ./
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag epoch_frontend:$VERSION $DOCKER_USERNAME/epoch_frontend:$VERSION
            docker push $DOCKER_USERNAME/epoch_frontend:$VERSION
            docker run -d -p 80:80 -p 443:443 epoch_frontend:$VERSION
            exit
          EOF
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ steps.get_version_frontend.outputs.version }}


        if: success()
